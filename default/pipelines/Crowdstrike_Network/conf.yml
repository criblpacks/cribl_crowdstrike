output: default
groups:
  lYiMNr:
    name: Native Aggregation
    description: Enable to replace raw events with aggregation events for Network
      Connect Events
    disabled: false
    index: 4
  dlLbUK:
    name: Redis Aggregation
    index: 6
    disabled: true
asyncFuncTimeout: 1000
functions:
  - id: serde
    filter: "true"
    disabled: false
    conf:
      mode: extract
      type: json
      srcField: _raw
      keep:
        - Local*
        - Remote*
        - aip
        - aid
        - Protocol
        - event_simpleName
        - Connection*
        - timestamp
        - event_platform
    description: Agg & Filter prep
  - id: drop
    filter: RemoteAddressIP4.length>0 && LocalAddressIP4.length>0 &&
      RemoteAddressIP4 == LocalAddressIP4
    disabled: false
    conf: {}
    description: RemoteIP = LocalIP
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Enable Group A OR Group B, NOT BOTH
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: "GROUP A: Cribl Native Aggregation "
  - id: aggregation
    filter: LocalPort <= RemotePort && LocalPort!=0
    disabled: false
    conf:
      passthrough: false
      preserveGroupBys: true
      sufficientStatsOnly: false
      metricsMode: false
      timeWindow: 60s
      aggregations:
        - values(event_simpleName).as(event_simpleName)
        - values(RemotePort).as(RemotePort)
        - values(aip).as(aip)
        - values(event_platform).as(event_platform)
        - count()
      cumulative: false
      flushOnInputClose: true
      groupbys:
        - Local*
        - RemoteAdd*
        - aid*
        - Protocol
      add: []
    groupId: lYiMNr
    description: LocalAddress is likely the server, since port is lower. Aggregate
      on LocalPort, collect values of RemotePort
  - id: aggregation
    filter: LocalPort > RemotePort || LocalPort==0
    disabled: false
    conf:
      passthrough: false
      preserveGroupBys: false
      sufficientStatsOnly: false
      metricsMode: false
      timeWindow: 60s
      aggregations:
        - values(event_simpleName).as(event_simpleName)
        - values(LocalPort).as(LocalPort)
        - values(aip).as(aip)
        - values(event_platform).as(event_platform)
        - count()
      cumulative: false
      flushOnInputClose: true
      groupbys:
        - LocalAdd*
        - aid*
        - Remote*
        - Protocol
      add: []
    groupId: lYiMNr
    description: RemoteAddress is likely the server, since port is lower. Aggregate
      on RemotePort, collect values of LocalPort
  - id: eval
    filter: "true"
    disabled: false
    conf:
      add:
        - value: "aip.length==1 ? aip[0] : aip"
          name: aip
        - name: LocalPort
          value: "LocalPort.length==1 ? LocalPort[0] : LocalPort"
        - value: "RemotePort.length==1 ? RemotePort[0] : RemotePort"
          name: RemotePort
        - value: "event_platform.length ==1 ? event_platform[0] : event_platform"
          name: event_platform
        - name: event_simpleName
          value: "event_simpleName.length==1 ? event_simpleName[0] : event_simpleName"
    groupId: lYiMNr
  - id: serialize
    filter: "true"
    disabled: false
    conf:
      type: json
      dstField: _raw
      fields:
        - "!cribl*"
        - "!_time"
        - "!__*"
        - "!_raw"
        - "*"
    groupId: lYiMNr
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: "GROUP B: Aggregation via Redis"
  - id: eval
    filter: "true"
    disabled: true
    conf:
      add:
        - name: Agg_Count_Threshold
          value: "100"
        - name: Agg_Period
          value: "60"
    groupId: dlLbUK
    description: Agg Thresholds Definition
  - id: eval
    filter: LocalPort !== undefined && RemotePort !== undefined
    disabled: true
    conf:
      add:
        - name: __network_key
          value: "LocalPort <= RemotePort && LocalPort !== 0 && RemotePort !==0 ?
            '__net___'+LocalAddressIP4+'___'+LocalPort+'___'+RemoteAddressIP4+'\
            ___'+Protocol :
            '__net___'+RemoteAddressIP4+'___'+RemotePort+'___'+LocalAddressIP4+\
            '___'+Protocol"
        - name: __network_key
          value: "LocalPort == 0 ?
            '__net___'+RemoteAddressIP4+'___'+RemotePort+'___'+LocalAddressIP4+\
            '___'+Protocol+'___'+aip : __network_key"
        - name: __network_key
          value: "RemotePort == 0  ?
            '__net___'+LocalAddressIP4+'___'+LocalPort+'___'+RemoteAddressIP4+'\
            ___'+Protocol+'___'+aip : __network_key"
    groupId: dlLbUK
    description: set key field for redis; account for who has lower port and higher port
  - id: redis
    filter: "true"
    disabled: true
    conf:
      commands:
        - outField: __setnx_results
          command: setnx
          keyExpr: __network_key
          argsExpr: "1"
      authType: manual
      maxBlockSecs: 60
      url: redis://redis-cache:6379
      password: "#42:PF6diadTv1jT0zyKb7whe2XbUmnih5SAdx62okhepENWObQjnu+rAAeiUxN/CpTi\
        +LgxlvHzsxmoSE6uPb8OUA=="
    description: Create key in Redis regardless of traffic direction
    groupId: dlLbUK
  - id: redis
    filter: __setnx_results==1
    disabled: true
    conf:
      commands:
        - outField: __sadd_simplename_results
          command: sadd
          keyExpr: "'eventnames'+ __network_key"
          argsExpr: event_simpleName
        - outField: __expire_simplename_results
          command: expire
          keyExpr: "'eventnames'+ __network_key"
          argsExpr: Agg_Period
        - outField: __expire_networkkey_results
          command: expire
          keyExpr: __network_key
          argsExpr: Agg_Period
      authType: manual
      maxBlockSecs: 60
      url: redis://redis-cache:6379
      password: "#42:Ym6odpG1LixiGYB11DaCaThnEoao2OzEZyseqFzCfPWgrhlW71mZUDQwKTeqHoPY\
        nTSi677/yhYbaJht/hsKzQ=="
    description: Avoiding collisions so lists of simpleNames are accurate. Setting
      values only if setnx was successful
    groupId: dlLbUK
  - id: redis
    filter: __setnx_results==0
    disabled: true
    conf:
      commands:
        - outField: __sadd_simplename_results
          command: sadd
          keyExpr: "'eventnames'+ __network_key"
          argsExpr: event_simpleName
        - command: incrby
          outField: Agg_Count
          keyExpr: __network_key
          argsExpr: "1"
      authType: manual
      maxBlockSecs: 60
      url: redis://redis-cache:6379
      password: "#42:QQ55j1ma4WxqPQoNd9IbVZwjkCGcQ6fIV5nI0JmvBP+Y64ftZ8/WkPcL74XzIU/j\
        N9SzXiMinL8Y7PKPt/emtw=="
    description: "Avoiding collisions so lists of simpleNames and count are accurate. "
    groupId: dlLbUK
  - id: redis
    filter: __setnx_results==0 &&  Agg_Count == Agg_Count_Threshold
    disabled: true
    conf:
      commands:
        - outField: event_simpleName
          command: smembers
          keyExpr: "'eventnames'+ __network_key"
        - outField: Agg_Window
          command: pttl
          keyExpr: __network_key
      authType: manual
      maxBlockSecs: 60
      url: redis://redis-cache:6379
      password: "#42:++5CIa38y5Dq2EZpPJWEkd82fNmX7X9yY8syV+Knjeydei1/wV5L+8t6QPtXi9lG\
        TlrWUxHXwhhHVXAWP2Ns0Q=="
    description: Get list of simpleNames being aggregated & time period for aggregation
    groupId: dlLbUK
  - id: redis
    filter: __setnx_results==0 &&  Agg_Count == Agg_Count_Threshold
    disabled: true
    conf:
      commands:
        - outField: __del_results
          command: del
          keyExpr: "'eventnames'+ __network_key"
          argsExpr: __network_key
      authType: manual
      maxBlockSecs: 60
      url: redis://redis-cache:6379
      password: "#42:YM8n/Hv70g+TApeldcYjk9LZ2eDMsjU8PNV/MQi0q6oo/2zDOjU03yrPgIsOMnVp\
        xIGPnoAimdG48gyIxSrLnw=="
    description: Delete both keys to start new aggregation period
    groupId: dlLbUK
  - id: drop
    filter: (__setnx_results==0 && Agg_Count < Agg_Count_Threshold) ||
      (__setnx_results==1)
    disabled: true
    conf: {}
    groupId: dlLbUK
    final: true
    description: Drop all events if agg count is less than 10
  - id: eval
    filter: Agg_Window !== undefined
    disabled: true
    conf:
      add:
        - name: Agg_Window
          value: (Agg_Period - Agg_Window/1000).toFixed(3)
    groupId: dlLbUK
    description: Calculate Agg Window
  - id: eval
    filter: __setnx_results !== undefined
    disabled: true
    conf:
      add:
        - value: "aip.length==1 ? aip[0] : aip"
          name: aip
        - name: event_simpleName
          value: "event_simpleName.length==1 ? event_simpleName[0] : event_simpleName"
        - name: LocalPort
          value: "LocalPort.length==1 ? LocalPort[0] : LocalPort"
        - value: "RemotePort.length==1 ? RemotePort[0] : RemotePort"
          name: RemotePort
    groupId: dlLbUK
    description: DeJSONify single value fields
  - id: serialize
    filter: __setnx_results !== undefined
    disabled: true
    conf:
      type: json
      dstField: _raw
      fields:
        - aid
        - aip
        - Local*
        - Remote*
        - Protocol
        - timestamp
        - "*count"
        - "!Agg_Period"
        - Agg*
        - event_simpleName*
    groupId: dlLbUK
    description: Built aggregate event
  - id: eval
    filter: __setnx_results !== undefined
    disabled: true
    conf:
      remove:
        - aid
        - aip
        - Local*
        - Remote*
        - Protocol
        - Conn*
        - timestamp
        - event_simpleName
        - Agg*
    groupId: dlLbUK
    description: Remove serialized fields
  - id: eval
    filter: "true"
    disabled: false
    conf:
      add: []
      keep:
        - cribl*
        - _time
        - _raw*
        - index
        - source
        - sourcetype
        - host
      remove:
        - "*"
    description: Cleanup
